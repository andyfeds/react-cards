JavaScript ES6

1. Arrow Functions
Arrow function allows you to write the shorter syntax for function. It makes your code clean and more readable

// Old method
function greet()
{
    console.log('Hello');
}
var greet1 = function(){
    console.log('Hello');
}
//ES6 method
var greet2 = () => {
    console.log('Hello');
}

What About this?
The handling of this is also different in arrow functions compared to regular functions.

In short, with arrow functions there is no binding of this.

In regular functions the this keyword represented the object that called the function, which could be the window, the document, a button or whatever.

With arrow functions, the this keyword always represents the object that defined the arrow function.


2. Let and Const
Use ‘let’ and ‘const’ instead of ‘var’ keyword.

Let defines a local variable limiting their scope to the block in which they are declared.
Const defines a constant variable whose values cannot be changed.


3. Array Methods
Map
The .map() method allows you to run a function on each item in the array, returning a new array as the result.

In React, map() can be used to generate lists.

const myArray = ['apple', 'banana', 'orange'];

const myList = myArray.map((item) => console.log(item));


Destructuring

Destructuring makes it easy to extract only what is needed from arrays & objects.

## Arrays

const vehicles = ['mustang', 'ferrari', 'porche'];

// old way
const car = vehicles[0];
const truck = vehicles[1];
const suv = vehicles[2];

// new way
const [car, truck, suv] = vehicles;

Note: When destructuring arrays, the order that variables are declared is important.
const vehicles = ['mustang', 'f-150', 'expedition'];

const [car,, suv] = vehicles;


## objects
const vehicleOne = {
  brand: 'Ford',
  model: 'Mustang',
  type: 'car',
  year: 2021, 
  color: 'red'
}

myVehicle(vehicleOne);

// old way
function myVehicle(vehicle) {
  const message = 'My ' + vehicle.type + ' is a ' + vehicle.color + ' ' + vehicle.brand + ' ' + vehicle.model + '.';
}

// New way
const vehicleOne = {
  brand: 'Ford',
  model: 'Mustang',
  type: 'car',
  year: 2021, 
  color: 'red'
}

myVehicle(vehicleOne);

function myVehicle({type, color, brand, model}) {
  const message = 'My ' + type + ' is a ' + color + ' ' + brand + ' ' + model + '.';
}


Spread Operator
The JavaScript spread operator (...) allows us to quickly copy all or part of an existing array or object into another array or object.

const numbersOne = [1, 2, 3];
const numbersTwo = [4, 5, 6];
const numbersCombined = [...numbersOne, ...numbersTwo];

The spread operator is often used in combination with destructuring.
const numbers = [1, 2, 3, 4, 5, 6];

const [one, two, ...rest] = numbers;

We can use the spread operator with objects too:
const myVehicle = {
  brand: 'Ford',
  model: 'Mustang',
  color: 'red'
}

const updateMyVehicle = {
  type: 'car',
  year: 2021, 
  color: 'yellow'
}

const myUpdatedVehicle = {...myVehicle, ...updateMyVehicle}

